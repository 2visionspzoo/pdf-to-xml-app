"""
Test kompletnego przetwarzania faktury
Testuje ca≈Çy proces: PDF -> parsowanie -> XML
"""
import sys
import os
import subprocess
import json
from pathlib import Path

# Dodaj ≈õcie≈ºkƒô do modu≈Ç√≥w
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

def test_full_processing():
    print("=" * 60)
    print("TEST KOMPLETNEGO PRZETWARZANIA FAKTURY")
    print("=" * 60)
    
    # ≈öcie≈ºki
    input_pdf = r"C:\pdf-to-xml-app\input\Faktura 11_07_2025.pdf"
    app_dir = r"C:\pdf-to-xml-app"
    output_dir = r"C:\pdf-to-xml-app\app\output"
    
    # Sprawd≈∫ czy plik istnieje
    if not os.path.exists(input_pdf):
        print(f"‚ùå Nie znaleziono pliku: {input_pdf}")
        return
    
    print(f"üìÑ Plik wej≈õciowy: {os.path.basename(input_pdf)}")
    print(f"üìÅ Katalog wyj≈õciowy: {output_dir}\n")
    
    # Usu≈Ñ stare pliki wyj≈õciowe
    print("üßπ Czyszczenie katalogu wyj≈õciowego...")
    for file in Path(output_dir).glob("*"):
        if file.is_file():
            file.unlink()
    
    # Uruchom g≈Ç√≥wnƒÖ aplikacjƒô
    print("\nüöÄ Uruchamiam aplikacjƒô...")
    print("-" * 40)
    
    try:
        # Zmie≈Ñ katalog roboczy
        os.chdir(app_dir)
        
        # Uruchom aplikacjƒô
        result = subprocess.run(
            [sys.executable, "app/main.py"],
            capture_output=True,
            text=True,
            cwd=app_dir
        )
        
        # Wy≈õwietl output
        if result.stdout:
            print("STDOUT:")
            print(result.stdout)
        if result.stderr:
            print("STDERR:")
            print(result.stderr)
        
        print("-" * 40)
        
        # Sprawd≈∫ wyniki
        print("\nüìä SPRAWDZENIE WYNIK√ìW:")
        print("-" * 40)
        
        # Szukaj wygenerowanych plik√≥w
        xml_files = list(Path(output_dir).glob("*.xml"))
        json_files = list(Path(output_dir).glob("*.json"))
        
        if xml_files:
            print(f"‚úÖ Znaleziono {len(xml_files)} plik√≥w XML:")
            for xml_file in xml_files:
                print(f"   - {xml_file.name}")
                
                # Sprawd≈∫ zawarto≈õƒá XML
                with open(xml_file, 'r', encoding='utf-8') as f:
                    xml_content = f.read()
                
                # Podstawowe sprawdzenia
                checks = []
                if '<Dokument>' in xml_content:
                    checks.append("‚úÖ Zawiera tag <Dokument>")
                else:
                    checks.append("‚ùå Brak tagu <Dokument>")
                
                if '<Naglowek>' in xml_content:
                    checks.append("‚úÖ Zawiera tag <Naglowek>")
                else:
                    checks.append("‚ùå Brak tagu <Naglowek>")
                
                if '<Pozycje>' in xml_content:
                    checks.append("‚úÖ Zawiera tag <Pozycje>")
                else:
                    checks.append("‚ùå Brak tagu <Pozycje>")
                
                if '11/07/2025' in xml_content:
                    checks.append("‚úÖ Zawiera numer faktury")
                else:
                    checks.append("‚ùå Brak numeru faktury")
                
                print("\n   Sprawdzenie zawarto≈õci:")
                for check in checks:
                    print(f"   {check}")
                
                # Wy≈õwietl fragment XML
                print("\n   Fragment XML (pierwsze 500 znak√≥w):")
                print("   " + "-" * 35)
                lines = xml_content[:500].split('\n')
                for line in lines[:10]:
                    print(f"   {line}")
                if len(xml_content) > 500:
                    print("   ...")
        else:
            print("‚ùå Nie znaleziono plik√≥w XML")
        
        if json_files:
            print(f"\n‚úÖ Znaleziono {len(json_files)} plik√≥w JSON:")
            for json_file in json_files:
                print(f"   - {json_file.name}")
                
                # Za≈Çaduj i sprawd≈∫ JSON
                with open(json_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                
                print(f"\n   Analiza danych JSON:")
                if 'invoice_number' in data:
                    print(f"   ‚Ä¢ Numer faktury: {data['invoice_number']}")
                if 'seller' in data and data['seller'].get('name'):
                    print(f"   ‚Ä¢ Sprzedawca: {data['seller']['name']}")
                if 'buyer' in data and data['buyer'].get('name'):
                    print(f"   ‚Ä¢ Nabywca: {data['buyer']['name']}")
                if 'items' in data:
                    print(f"   ‚Ä¢ Liczba pozycji: {len(data['items'])}")
                if 'summary' in data:
                    print(f"   ‚Ä¢ Kwota brutto: {data['summary'].get('gross_total', 'N/A')} z≈Ç")
        
        # Podsumowanie
        print("\n" + "=" * 60)
        print("PODSUMOWANIE TESTU:")
        print("-" * 40)
        
        success = len(xml_files) > 0
        if success:
            print("‚úÖ TEST ZAKO≈ÉCZONY SUKCESEM")
            print(f"   Wygenerowano {len(xml_files)} plik√≥w XML")
            print(f"   Wygenerowano {len(json_files)} plik√≥w JSON")
        else:
            print("‚ùå TEST ZAKO≈ÉCZONY NIEPOWODZENIEM")
            print("   Nie uda≈Ço siƒô wygenerowaƒá plik√≥w XML")
        
    except Exception as e:
        print(f"‚ùå B≈ÇƒÖd podczas uruchamiania aplikacji: {e}")
        import traceback
        traceback.print_exc()
    
    print("\n" + "=" * 60)
    print("KONIEC TESTU")
    print("=" * 60)

if __name__ == "__main__":
    test_full_processing()
